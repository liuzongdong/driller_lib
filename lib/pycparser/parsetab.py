
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'parameter_declarationleftLORleftLANDleftORleftXORleftANDleftEQNEleftGTGELTLEleftRSHIFTLSHIFTleftPLUSMINUSleftTIMESDIVIDEMOD_BOOL _COMPLEX AUTO BREAK CASE CHAR CONST CONTINUE DEFAULT DO DOUBLE ELSE ENUM EXTERN FLOAT FOR GOTO IF INLINE INT LONG REGISTER OFFSETOF RESTRICT RETURN SHORT SIGNED SIZEOF STATIC STRUCT SWITCH TYPEDEF UNION UNSIGNED VOID VOLATILE WHILE __INT128 ID TYPEID INT_CONST_DEC INT_CONST_OCT INT_CONST_HEX INT_CONST_BIN FLOAT_CONST HEX_FLOAT_CONST CHAR_CONST WCHAR_CONST STRING_LITERAL WSTRING_LITERAL PLUS MINUS TIMES DIVIDE MOD OR AND NOT XOR LSHIFT RSHIFT LOR LAND LNOT LT LE GT GE EQ NE EQUALS TIMESEQUAL DIVEQUAL MODEQUAL PLUSEQUAL MINUSEQUAL LSHIFTEQUAL RSHIFTEQUAL ANDEQUAL XOREQUAL OREQUAL PLUSPLUS MINUSMINUS ARROW CONDOP LPAREN RPAREN LBRACKET RBRACKET LBRACE RBRACE COMMA PERIOD SEMI COLON ELLIPSIS PPHASH PPPRAGMA PPPRAGMASTRabstract_declarator_opt : empty\n| abstract_declaratorassignment_expression_opt : empty\n| assignment_expressionblock_item_list_opt : empty\n| block_item_listdeclaration_list_opt : empty\n| declaration_listdeclaration_specifiers_no_type_opt : empty\n| declaration_specifiers_no_typedesignation_opt : empty\n| designationexpression_opt : empty\n| expressionid_init_declarator_list_opt : empty\n| id_init_declarator_listidentifier_list_opt : empty\n| identifier_listinit_declarator_list_opt : empty\n| init_declarator_listinitializer_list_opt : empty\n| initializer_listparameter_type_list_opt : empty\n| parameter_type_liststruct_declarator_list_opt : empty\n| struct_declarator_listtype_qualifier_list_opt : empty\n| type_qualifier_list direct_id_declarator   : ID\n         direct_id_declarator   : LPAREN id_declarator RPAREN\n         direct_id_declarator   : direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET\n         direct_id_declarator   : direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET\n                                    | direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET\n         direct_id_declarator   : direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET\n         direct_id_declarator   : direct_id_declarator LPAREN parameter_type_list RPAREN\n                                    | direct_id_declarator LPAREN identifier_list_opt RPAREN\n         direct_typeid_declarator   : TYPEID\n         direct_typeid_declarator   : LPAREN typeid_declarator RPAREN\n         direct_typeid_declarator   : direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET\n         direct_typeid_declarator   : direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET\n                                    | direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET\n         direct_typeid_declarator   : direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET\n         direct_typeid_declarator   : direct_typeid_declarator LPAREN parameter_type_list RPAREN\n                                    | direct_typeid_declarator LPAREN identifier_list_opt RPAREN\n         direct_typeid_noparen_declarator   : TYPEID\n         direct_typeid_noparen_declarator   : direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET\n         direct_typeid_noparen_declarator   : direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET\n                                    | direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET\n         direct_typeid_noparen_declarator   : direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET\n         direct_typeid_noparen_declarator   : direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN\n                                    | direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN\n         id_declarator  : direct_id_declarator\n         id_declarator  : pointer direct_id_declarator\n         typeid_declarator  : direct_typeid_declarator\n         typeid_declarator  : pointer direct_typeid_declarator\n         typeid_noparen_declarator  : direct_typeid_noparen_declarator\n         typeid_noparen_declarator  : pointer direct_typeid_noparen_declarator\n         translation_unit_or_empty   : translation_unit\n                                        | empty\n         translation_unit    : external_declaration\n         translation_unit    : translation_unit external_declaration\n         external_declaration    : function_definition\n         external_declaration    : declaration\n         external_declaration    : pp_directive\n                                    | pppragma_directive\n         external_declaration    : SEMI\n         pp_directive  : PPHASH\n         pppragma_directive      : PPPRAGMA\n                                    | PPPRAGMA PPPRAGMASTR\n         function_definition : id_declarator declaration_list_opt compound_statement\n         function_definition : declaration_specifiers id_declarator declaration_list_opt compound_statement\n         statement   : labeled_statement\n                        | expression_statement\n                        | compound_statement\n                        | selection_statement\n                        | iteration_statement\n                        | jump_statement\n                        | pppragma_directive\n         pragmacomp_or_statement     : pppragma_directive statement\n                                        | statement\n         decl_body : declaration_specifiers init_declarator_list_opt\n                      | declaration_specifiers_no_type id_init_declarator_list_opt\n         declaration : decl_body SEMI\n         declaration_list    : declaration\n                                | declaration_list declaration\n         declaration_specifiers_no_type  : type_qualifier declaration_specifiers_no_type_opt\n         declaration_specifiers_no_type  : storage_class_specifier declaration_specifiers_no_type_opt\n         declaration_specifiers_no_type  : function_specifier declaration_specifiers_no_type_opt\n         declaration_specifiers  : declaration_specifiers type_qualifier\n         declaration_specifiers  : declaration_specifiers storage_class_specifier\n         declaration_specifiers  : declaration_specifiers function_specifier\n         declaration_specifiers  : declaration_specifiers type_specifier_no_typeid\n         declaration_specifiers  : type_specifier\n         declaration_specifiers  : declaration_specifiers_no_type type_specifier\n         storage_class_specifier : AUTO\n                                    | REGISTER\n                                    | STATIC\n                                    | EXTERN\n                                    | TYPEDEF\n         function_specifier  : INLINE\n         type_specifier_no_typeid  : VOID\n                                      | _BOOL\n                                      | CHAR\n                                      | SHORT\n                                      | INT\n                                      | LONG\n                                      | FLOAT\n                                      | DOUBLE\n                                      | _COMPLEX\n                                      | SIGNED\n                                      | UNSIGNED\n                                      | __INT128\n         type_specifier  : typedef_name\n                            | enum_specifier\n                            | struct_or_union_specifier\n                            | type_specifier_no_typeid\n         type_qualifier  : CONST\n                            | RESTRICT\n                            | VOLATILE\n         init_declarator_list    : init_declarator\n                                    | init_declarator_list COMMA init_declarator\n         init_declarator : declarator\n                            | declarator EQUALS initializer\n         id_init_declarator_list    : id_init_declarator\n                                       | id_init_declarator_list COMMA init_declarator\n         id_init_declarator : id_declarator\n                               | id_declarator EQUALS initializer\n         specifier_qualifier_list    : specifier_qualifier_list type_specifier_no_typeid\n         specifier_qualifier_list    : specifier_qualifier_list type_qualifier\n         specifier_qualifier_list  : type_specifier\n         specifier_qualifier_list  : type_qualifier_list type_specifier\n         struct_or_union_specifier   : struct_or_union ID\n                                        | struct_or_union TYPEID\n         struct_or_union_specifier : struct_or_union brace_open struct_declaration_list brace_close\n                                      | struct_or_union brace_open brace_close\n         struct_or_union_specifier   : struct_or_union ID brace_open struct_declaration_list brace_close\n                                        | struct_or_union ID brace_open brace_close\n                                        | struct_or_union TYPEID brace_open struct_declaration_list brace_close\n                                        | struct_or_union TYPEID brace_open brace_close\n         struct_or_union : STRUCT\n                            | UNION\n         struct_declaration_list     : struct_declaration\n                                        | struct_declaration_list struct_declaration\n         struct_declaration : specifier_qualifier_list struct_declarator_list_opt SEMI\n         struct_declaration : SEMI\n         struct_declaration : pppragma_directive\n         struct_declarator_list  : struct_declarator\n                                    | struct_declarator_list COMMA struct_declarator\n         struct_declarator : declarator\n         struct_declarator   : declarator COLON constant_expression\n                                | COLON constant_expression\n         enum_specifier  : ENUM ID\n                            | ENUM TYPEID\n         enum_specifier  : ENUM brace_open enumerator_list brace_close\n         enum_specifier  : ENUM ID brace_open enumerator_list brace_close\n                            | ENUM TYPEID brace_open enumerator_list brace_close\n         enumerator_list : enumerator\n                            | enumerator_list COMMA\n                            | enumerator_list COMMA enumerator\n         enumerator  : ID\n                        | ID EQUALS constant_expression\n         declarator  : id_declarator\n                        | typeid_declarator\n         pointer : TIMES type_qualifier_list_opt\n                    | TIMES type_qualifier_list_opt pointer\n         type_qualifier_list : type_qualifier\n                                | type_qualifier_list type_qualifier\n         parameter_type_list : parameter_list\n                                | parameter_list COMMA ELLIPSIS\n         parameter_list  : parameter_declaration\n                            | parameter_list COMMA parameter_declaration\n         parameter_declaration   : declaration_specifiers id_declarator\n                                    | declaration_specifiers typeid_noparen_declarator\n         parameter_declaration   : declaration_specifiers abstract_declarator_opt\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         initializer : assignment_expression\n         initializer : brace_open initializer_list_opt brace_close\n                        | brace_open initializer_list COMMA brace_close\n         initializer_list    : designation_opt initializer\n                                | initializer_list COMMA designation_opt initializer\n         designation : designator_list EQUALS\n         designator_list : designator\n                            | designator_list designator\n         designator  : LBRACKET constant_expression RBRACKET\n                        | PERIOD identifier\n         type_name   : specifier_qualifier_list abstract_declarator_opt\n         abstract_declarator     : pointer\n         abstract_declarator     : pointer direct_abstract_declarator\n         abstract_declarator     : direct_abstract_declarator\n         direct_abstract_declarator  : LPAREN abstract_declarator RPAREN  direct_abstract_declarator  : direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET\n         direct_abstract_declarator  : LBRACKET assignment_expression_opt RBRACKET\n         direct_abstract_declarator  : direct_abstract_declarator LBRACKET TIMES RBRACKET\n         direct_abstract_declarator  : LBRACKET TIMES RBRACKET\n         direct_abstract_declarator  : direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN\n         direct_abstract_declarator  : LPAREN parameter_type_list_opt RPAREN\n         block_item  : declaration\n                        | statement\n         block_item_list : block_item\n                            | block_item_list block_item\n         compound_statement : brace_open block_item_list_opt brace_close  labeled_statement : ID COLON pragmacomp_or_statement  labeled_statement : CASE constant_expression COLON pragmacomp_or_statement  labeled_statement : DEFAULT COLON pragmacomp_or_statement  selection_statement : IF LPAREN expression RPAREN pragmacomp_or_statement  selection_statement : IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement  selection_statement : SWITCH LPAREN expression RPAREN pragmacomp_or_statement  iteration_statement : WHILE LPAREN expression RPAREN pragmacomp_or_statement  iteration_statement : DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI  iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement  iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement  jump_statement  : GOTO ID SEMI  jump_statement  : BREAK SEMI  jump_statement  : CONTINUE SEMI  jump_statement  : RETURN expression SEMI\n                            | RETURN SEMI\n         expression_statement : expression_opt SEMI  expression  : assignment_expression\n                        | expression COMMA assignment_expression\n         typedef_name : TYPEID  assignment_expression   : conditional_expression\n                                    | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQUALS\n                                | XOREQUAL\n                                | TIMESEQUAL\n                                | DIVEQUAL\n                                | MODEQUAL\n                                | PLUSEQUAL\n                                | MINUSEQUAL\n                                | LSHIFTEQUAL\n                                | RSHIFTEQUAL\n                                | ANDEQUAL\n                                | OREQUAL\n         constant_expression : conditional_expression  conditional_expression  : binary_expression\n                                    | binary_expression CONDOP expression COLON conditional_expression\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression RSHIFT binary_expression\n                                | binary_expression LSHIFT binary_expression\n                                | binary_expression LT binary_expression\n                                | binary_expression LE binary_expression\n                                | binary_expression GE binary_expression\n                                | binary_expression GT binary_expression\n                                | binary_expression EQ binary_expression\n                                | binary_expression NE binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression OR binary_expression\n                                | binary_expression XOR binary_expression\n                                | binary_expression LAND binary_expression\n                                | binary_expression LOR binary_expression\n         cast_expression : unary_expression  cast_expression : LPAREN type_name RPAREN cast_expression  unary_expression    : postfix_expression  unary_expression    : PLUSPLUS unary_expression\n                                | MINUSMINUS unary_expression\n                                | unary_operator cast_expression\n         unary_expression    : SIZEOF unary_expression\n                                | SIZEOF LPAREN type_name RPAREN\n         unary_operator  : AND\n                            | TIMES\n                            | PLUS\n                            | MINUS\n                            | NOT\n                            | LNOT\n         postfix_expression  : primary_expression  postfix_expression  : postfix_expression LBRACKET expression RBRACKET  postfix_expression  : postfix_expression LPAREN argument_expression_list RPAREN\n                                | postfix_expression LPAREN RPAREN\n         postfix_expression  : postfix_expression PERIOD ID\n                                | postfix_expression PERIOD TYPEID\n                                | postfix_expression ARROW ID\n                                | postfix_expression ARROW TYPEID\n         postfix_expression  : postfix_expression PLUSPLUS\n                                | postfix_expression MINUSMINUS\n         postfix_expression  : LPAREN type_name RPAREN brace_open initializer_list brace_close\n                                | LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close\n         primary_expression  : identifier  primary_expression  : constant  primary_expression  : unified_string_literal\n                                | unified_wstring_literal\n         primary_expression  : LPAREN expression RPAREN  primary_expression  : OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN\n         offsetof_member_designator : identifier\n                                         | offsetof_member_designator PERIOD identifier\n                                         | offsetof_member_designator LBRACKET expression RBRACKET\n         argument_expression_list    : assignment_expression\n                                        | argument_expression_list COMMA assignment_expression\n         identifier  : ID  constant    : INT_CONST_DEC\n                        | INT_CONST_OCT\n                        | INT_CONST_HEX\n                        | INT_CONST_BIN\n         constant    : FLOAT_CONST\n                        | HEX_FLOAT_CONST\n         constant    : CHAR_CONST\n                        | WCHAR_CONST\n         unified_string_literal  : STRING_LITERAL\n                                    | unified_string_literal STRING_LITERAL\n         unified_wstring_literal : WSTRING_LITERAL\n                                    | unified_wstring_literal WSTRING_LITERAL\n         brace_open  :   LBRACE\n         brace_close :   RBRACE\n        empty : '
    
_lr_action_items = {'LOR':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,160,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'$end':([1,2,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,22,24,25,29,30,32,33,34,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,64,66,67,105,106,107,108,109,110,111,133,135,143,189,198,199,216,218,219,222,225,227,245,289,291,296,297,298,299,300,303,304,308,309,331,332,336,337,358,359,360,361,],[-106,-102,-116,-115,-95,-104,-108,0,-96,-113,-117,-105,-111,-112,-107,-309,-109,-103,-99,-100,-119,-93,-114,-97,-221,-110,-101,-98,-118,-92,-2,-173,-309,-188,-90,-56,-1,-29,-89,-174,-52,-91,-190,-45,-172,-152,-153,-94,-132,-133,-27,-166,-28,-164,-57,-189,-53,-308,-135,-195,-193,-167,-165,-191,-197,-30,-154,-137,-139,-134,-51,-50,-36,-35,-196,-194,-192,-155,-156,-136,-138,-49,-46,-34,-31,-47,-48,-32,-33,]),'COMMA':([1,2,4,5,6,7,8,10,12,13,14,15,16,17,18,19,20,22,24,25,29,30,32,33,34,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,59,60,64,66,67,69,70,73,78,79,80,81,84,85,86,88,89,90,91,93,94,97,99,100,103,104,105,106,107,108,109,110,111,119,120,128,129,130,133,135,142,143,145,179,181,182,185,186,189,190,191,194,195,196,197,198,199,204,205,216,218,219,220,221,222,223,225,227,229,230,234,236,237,238,239,240,241,244,245,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,270,271,272,273,274,275,276,277,280,282,283,289,291,296,297,298,299,300,301,303,304,305,306,307,308,309,311,313,322,323,325,327,328,331,332,333,336,337,338,339,345,348,349,350,358,359,360,361,366,367,368,371,377,379,382,383,384,386,389,392,393,395,397,398,],[-106,-102,-116,-115,-95,-104,-108,-96,-113,-117,-105,-111,-112,-107,-309,-109,-103,-99,-100,-119,-93,-114,-97,-221,-110,-101,-98,-118,-92,-2,-173,-309,-188,-90,-56,-1,-29,-89,-174,-52,-91,-190,-45,-172,-152,-153,-94,-132,-133,-305,-303,-299,-294,-296,-300,-295,-257,-236,-297,-222,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-27,-166,-28,-164,-57,-189,-53,-170,217,223,-157,-160,-308,-135,-130,-195,-260,-257,-262,-261,-279,-280,-193,-306,-263,281,-219,-309,-304,-167,-165,290,-175,-191,-197,-30,223,223,-154,-158,-137,-139,-163,-128,-149,-129,314,-147,-54,-37,-162,-131,-134,319,-223,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,281,-243,-252,-253,-278,-277,281,-276,-275,-274,324,-292,-287,-187,-188,-51,-50,-36,-35,-196,-194,-192,-171,-155,-156,-159,-161,-235,-136,-138,-151,-55,-272,-273,-264,-258,-220,-49,-46,-176,-34,-31,-150,-148,-38,-237,-293,372,-47,-48,-32,-33,-44,-43,-288,-281,-180,-177,-42,-39,281,-282,396,-40,-41,-181,-178,-179,]),'AUTO':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,47,51,54,58,59,60,64,66,67,113,115,116,133,135,217,222,225,227,245,284,303,304,308,309,316,],[6,-106,-102,-116,-115,-95,-104,-108,-96,6,-113,-117,-105,-111,-112,-107,6,-109,-103,-99,-100,-119,6,6,-93,-114,-97,-221,-110,-101,-98,-118,-92,-90,-89,-91,6,-152,-153,-94,-132,-133,6,6,6,-308,-135,6,-154,-137,-139,-134,6,-155,-156,-136,-138,6,]),'ANDEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,154,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'GT':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,166,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,166,-244,-241,-242,166,-239,-249,166,-245,-248,-240,166,166,-246,-247,-243,166,166,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'TIMES':([1,2,4,5,6,7,8,10,12,13,14,15,16,17,18,19,20,22,24,25,29,30,32,33,34,35,36,37,41,42,45,47,51,54,58,59,60,62,64,66,67,69,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,108,112,114,117,133,134,135,142,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,188,190,191,192,196,197,198,200,201,202,208,209,210,214,222,224,225,227,230,233,236,242,244,245,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,279,280,281,284,285,286,287,292,293,294,303,304,308,309,312,314,315,320,321,322,323,324,325,326,327,340,341,342,351,352,353,356,362,363,364,368,369,371,372,374,378,386,387,390,396,],[-106,-102,-116,-115,-95,-104,-108,-96,-113,-117,-105,-111,-112,-107,45,-109,-103,-99,-100,-119,-93,-114,-97,-221,-110,-101,-98,-118,74,-92,-309,-90,-89,-91,45,-152,-153,-307,-94,-132,-133,-305,-303,-269,-267,-299,-266,144,-294,-296,-300,-295,-268,-265,-257,165,-297,-298,-271,-301,144,-302,-283,144,-270,-259,-284,-286,144,144,-285,-238,-27,-166,-28,45,-309,-309,214,-308,45,-135,-130,-266,-260,144,-226,-229,-227,144,-228,-230,-233,-224,-231,-234,-225,-232,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,-257,144,-262,-261,144,-279,-280,144,-306,-263,144,45,-304,-167,-309,-28,287,-309,-28,294,-266,-154,144,-137,-139,-128,144,-129,45,-131,-134,165,165,-241,165,165,-239,165,165,165,165,-240,165,165,165,165,165,165,165,-278,-277,-276,-275,-274,144,-287,144,45,144,144,-266,144,144,-266,-155,-156,-136,-138,144,45,-309,144,144,-272,-273,144,-264,-309,-258,-309,-28,364,-11,-12,144,144,144,144,-266,-288,144,-281,-309,-182,-309,-282,144,-11,-309,]),'COLON':([1,2,4,5,7,8,12,13,14,15,16,17,19,20,25,30,33,34,35,37,50,53,59,60,66,67,69,70,73,78,79,80,81,84,85,86,88,89,90,91,93,94,97,99,100,103,104,111,133,134,135,142,145,179,181,182,185,186,190,191,195,197,219,222,225,227,229,230,234,236,239,240,241,244,245,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,270,271,273,274,275,280,296,297,303,304,308,309,313,314,322,323,325,327,328,336,337,345,348,360,361,366,367,368,371,382,383,386,392,393,],[-106,-102,-116,-115,-104,-108,-113,-117,-105,-111,-112,-107,-109,-103,-119,-114,-221,-110,-101,-118,-29,-52,-152,-153,-132,-133,-305,-303,-299,-294,-296,-300,-295,-257,-236,-297,-222,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-53,-308,233,-135,-130,-260,-257,-262,-261,-279,-280,-306,-263,-219,-304,-30,-154,-137,-139,-163,-128,312,-129,-54,-37,-162,-131,-134,-223,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,320,-243,-252,-253,-278,-277,-276,-275,-274,-287,-36,-35,-155,-156,-136,-138,-55,233,-272,-273,-264,-258,-220,-34,-31,-38,-237,-32,-33,-44,-43,-288,-281,-42,-39,-282,-40,-41,]),'DOUBLE':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[8,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,8,-109,-103,-99,-100,-119,-309,8,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,8,-152,-153,-307,-86,-94,-88,-132,-133,8,8,-166,8,8,8,8,8,-308,8,-135,-68,-146,-145,-142,8,8,-130,8,8,8,8,8,-167,8,-154,-137,8,-139,8,-128,-129,-69,-131,-134,-143,8,-155,-156,-136,-138,-144,8,]),'RPAREN':([1,2,4,5,6,7,8,10,12,13,14,15,16,17,18,19,20,22,24,25,29,30,32,33,34,35,36,37,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,66,67,69,70,73,78,79,80,81,84,85,86,88,89,90,91,93,94,97,99,100,103,104,105,106,107,108,109,110,111,113,115,116,118,119,120,121,122,123,124,125,133,135,142,143,145,179,181,182,185,186,188,189,190,191,193,194,195,196,197,198,199,203,204,205,206,207,211,212,213,216,218,219,222,225,227,230,236,239,240,244,245,247,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,269,270,271,273,274,275,276,277,278,280,282,283,284,289,291,296,297,298,299,300,301,302,303,304,308,309,313,316,317,322,323,325,327,328,331,332,333,336,337,343,344,345,346,347,348,349,358,359,360,361,366,367,368,371,382,383,385,386,392,393,394,],[-106,-102,-116,-115,-95,-104,-108,-96,-113,-117,-105,-111,-112,-107,-309,-109,-103,-99,-100,-119,-93,-114,-97,-221,-110,-101,-98,-118,-92,-2,-173,-309,-188,-90,-56,-1,-29,-89,-174,-52,-91,-190,-45,-172,-309,-152,-153,-94,-132,-133,-305,-303,-299,-294,-296,-300,-295,-257,-236,-297,-222,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-27,-166,-28,-164,-57,-189,-53,-309,-309,-309,216,-170,-168,218,-188,-23,-24,219,-308,-135,-130,-195,-260,-257,-262,-261,-279,-280,275,-193,-306,-263,279,280,-219,-309,-304,-167,-165,289,-18,-175,-17,291,296,297,298,-191,-197,-30,-154,-137,-139,-128,-129,-54,-37,-131,-134,318,-223,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,321,-278,-277,-276,-275,-274,323,-292,325,-287,-187,-188,-309,-51,-50,-36,-35,-196,-194,-192,-171,-169,-155,-156,-136,-138,-55,-309,345,-272,-273,-264,-258,-220,-49,-46,-176,-34,-31,366,367,-38,368,-289,-237,-293,-47,-48,-32,-33,-44,-43,-288,-281,-42,-39,-290,-282,-40,-41,-291,]),'ID':([1,2,3,4,5,6,7,8,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,29,30,31,32,33,34,35,36,37,41,42,45,46,47,51,54,58,59,60,61,62,64,66,67,71,72,74,75,82,83,92,95,96,101,102,105,106,107,108,112,113,114,115,117,122,126,127,133,134,135,142,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,183,184,187,188,192,198,199,200,201,202,208,209,210,214,222,223,224,225,227,230,233,235,236,242,244,245,279,281,285,286,287,290,292,293,294,303,304,308,309,312,314,315,316,319,320,321,324,326,340,341,342,351,352,353,355,356,362,363,364,369,370,372,374,378,387,390,396,],[-106,-102,-141,-116,-115,-95,-104,-108,-96,-113,-117,-105,-111,-112,-107,50,-109,-103,59,-99,-140,-100,-119,-93,-114,66,-97,-221,-110,-101,-98,-118,78,-92,-309,50,-90,-89,-91,50,-152,-153,130,-307,-94,-132,-133,-269,-267,-266,78,-268,-265,78,78,-270,78,78,-27,-166,-28,-164,-309,78,-309,78,78,50,130,130,-308,50,-135,-130,-266,78,-226,-229,-227,78,-228,-230,-233,-224,-231,-234,-225,-232,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,271,78,274,78,78,-167,-165,-309,-28,78,-309,-28,78,-266,-154,130,78,-137,-139,-128,78,50,-129,50,-131,-134,78,78,78,78,-266,78,78,78,-266,-155,-156,-136,-138,78,50,-309,78,78,78,78,78,-309,-309,-28,78,-11,-12,78,78,78,78,78,-266,78,78,-309,-182,-309,78,-11,-309,]),'CONST':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,45,47,51,54,58,59,60,62,64,66,67,68,102,106,107,112,113,114,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,200,201,208,209,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,315,316,340,341,],[13,-106,-102,-116,-115,-95,-104,-108,-96,13,-113,-117,-105,-111,-112,-107,13,-109,-103,-99,-100,-119,13,13,-93,-114,-97,-221,-110,-101,-98,-118,-92,13,-90,-89,-91,13,-152,-153,-307,-94,-132,-133,13,13,-166,13,13,13,13,13,13,13,13,-308,13,-135,-68,-146,-145,-142,13,13,-130,13,13,13,13,13,-167,13,13,13,13,13,-154,-137,13,-139,13,-128,-129,-69,-131,-134,-143,13,-155,-156,-136,-138,-144,13,13,13,13,]),'INT_CONST_OCT':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,79,-307,-269,-267,-266,79,-268,-265,79,79,-270,79,79,-27,-166,-28,-309,-309,79,-266,79,-226,-229,-227,79,-228,-230,-233,-224,-231,-234,-225,-232,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-167,-309,-28,79,-309,-28,79,-266,79,79,79,79,79,79,-266,79,79,-266,79,-309,79,79,79,-309,-309,-28,79,-11,-12,79,79,79,79,-266,79,-309,-182,-309,79,-11,-309,]),'INT':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[14,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,14,-109,-103,-99,-100,-119,-309,14,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,14,-152,-153,-307,-86,-94,-88,-132,-133,14,14,-166,14,14,14,14,14,-308,14,-135,-68,-146,-145,-142,14,14,-130,14,14,14,14,14,-167,14,-154,-137,14,-139,14,-128,-129,-69,-131,-134,-143,14,-155,-156,-136,-138,-144,14,]),'HEX_FLOAT_CONST':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,80,-307,-269,-267,-266,80,-268,-265,80,80,-270,80,80,-27,-166,-28,-309,-309,80,-266,80,-226,-229,-227,80,-228,-230,-233,-224,-231,-234,-225,-232,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-167,-309,-28,80,-309,-28,80,-266,80,80,80,80,80,80,-266,80,80,-266,80,-309,80,80,80,-309,-309,-28,80,-11,-12,80,80,80,80,-266,80,-309,-182,-309,80,-11,-309,]),'LE':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,174,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,174,-244,-241,-242,174,-239,-249,174,-245,-248,-240,174,174,-246,-247,-243,174,174,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'CONDOP':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,175,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'__INT128':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[16,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,16,-109,-103,-99,-100,-119,-309,16,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,16,-152,-153,-307,-86,-94,-88,-132,-133,16,16,-166,16,16,16,16,16,-308,16,-135,-68,-146,-145,-142,16,16,-130,16,16,16,16,16,-167,16,-154,-137,16,-139,16,-128,-129,-69,-131,-134,-143,16,-155,-156,-136,-138,-144,16,]),'LBRACE':([3,21,23,31,59,60,62,66,67,279,318,321,325,326,351,352,356,372,374,378,387,390,396,],[-141,62,-140,62,62,62,-307,62,62,62,62,62,62,-309,-11,-12,62,-309,-182,-309,62,-11,-309,]),'FLOAT':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[17,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,17,-109,-103,-99,-100,-119,-309,17,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,17,-152,-153,-307,-86,-94,-88,-132,-133,17,17,-166,17,17,17,17,17,-308,17,-135,-68,-146,-145,-142,17,17,-130,17,17,17,17,17,-167,17,-154,-137,17,-139,17,-128,-129,-69,-131,-134,-143,17,-155,-156,-136,-138,-144,17,]),'OREQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,157,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'_COMPLEX':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[19,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,19,-109,-103,-99,-100,-119,-309,19,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,19,-152,-153,-307,-86,-94,-88,-132,-133,19,19,-166,19,19,19,19,19,-308,19,-135,-68,-146,-145,-142,19,19,-130,19,19,19,19,19,-167,19,-154,-137,19,-139,19,-128,-129,-69,-131,-134,-143,19,-155,-156,-136,-138,-144,19,]),'OR':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,178,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,178,-244,-241,-242,178,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'TIMESEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,148,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'CHAR':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[20,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,20,-109,-103,-99,-100,-119,-309,20,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,20,-152,-153,-307,-86,-94,-88,-132,-133,20,20,-166,20,20,20,20,20,-308,20,-135,-68,-146,-145,-142,20,20,-130,20,20,20,20,20,-167,20,-154,-137,20,-139,20,-128,-129,-69,-131,-134,-143,20,-155,-156,-136,-138,-144,20,]),'WCHAR_CONST':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,93,-307,-269,-267,-266,93,-268,-265,93,93,-270,93,93,-27,-166,-28,-309,-309,93,-266,93,-226,-229,-227,93,-228,-230,-233,-224,-231,-234,-225,-232,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-167,-309,-28,93,-309,-28,93,-266,93,93,93,93,93,93,-266,93,93,-266,93,-309,93,93,93,-309,-309,-28,93,-11,-12,93,93,93,93,-266,93,-309,-182,-309,93,-11,-309,]),'ENUM':([0,6,10,11,13,22,24,25,26,27,28,32,36,37,38,39,40,58,62,63,65,68,102,106,113,115,116,131,132,136,137,138,139,140,141,146,147,180,192,198,217,226,228,243,246,284,310,316,],[21,-95,-96,-309,-117,-99,-100,-119,-309,21,-309,-97,-98,-118,-87,-10,-9,21,-307,-86,-88,21,21,-166,21,21,21,21,21,-68,-146,-145,-142,21,21,21,21,21,21,-167,21,21,21,-69,-143,21,-144,21,]),'TYPEDEF':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,47,51,54,58,59,60,64,66,67,113,115,116,133,135,217,222,225,227,245,284,303,304,308,309,316,],[22,-106,-102,-116,-115,-95,-104,-108,-96,22,-113,-117,-105,-111,-112,-107,22,-109,-103,-99,-100,-119,22,22,-93,-114,-97,-221,-110,-101,-98,-118,-92,-90,-89,-91,22,-152,-153,-94,-132,-133,22,22,22,-308,-135,22,-154,-137,-139,-134,22,-155,-156,-136,-138,22,]),'PLUS':([13,25,37,41,62,69,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,112,114,117,133,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,188,190,191,192,197,198,200,201,202,208,209,210,214,224,233,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,279,280,281,285,286,287,292,293,294,312,315,320,321,322,323,324,325,326,327,340,341,342,351,352,353,356,362,363,364,368,369,371,372,374,378,386,387,390,396,],[-117,-119,-118,72,-307,-305,-303,-269,-267,-299,-266,72,-294,-296,-300,-295,-268,-265,-257,163,-297,-298,-271,-301,72,-302,-283,72,-270,-259,-284,-286,72,72,-285,-238,-27,-166,-28,-309,-309,72,-308,-266,-260,72,-226,-229,-227,72,-228,-230,-233,-224,-231,-234,-225,-232,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-257,72,-262,-261,72,-279,-280,72,-306,-263,72,-304,-167,-309,-28,72,-309,-28,72,-266,72,72,163,163,-241,-242,163,-239,163,163,163,163,-240,163,163,163,163,-243,163,163,-278,-277,-276,-275,-274,72,-287,72,72,72,-266,72,72,-266,72,-309,72,72,-272,-273,72,-264,-309,-258,-309,-28,72,-11,-12,72,72,72,72,-266,-288,72,-281,-309,-182,-309,-282,72,-11,-309,]),'STRUCT':([0,6,10,11,13,22,24,25,26,27,28,32,36,37,38,39,40,58,62,63,65,68,102,106,113,115,116,131,132,136,137,138,139,140,141,146,147,180,192,198,217,226,228,243,246,284,310,316,],[23,-95,-96,-309,-117,-99,-100,-119,-309,23,-309,-97,-98,-118,-87,-10,-9,23,-307,-86,-88,23,23,-166,23,23,23,23,23,-68,-146,-145,-142,23,23,23,23,23,23,-167,23,23,23,-69,-143,23,-144,23,]),'INLINE':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,47,51,54,58,59,60,64,66,67,113,115,116,133,135,217,222,225,227,245,284,303,304,308,309,316,],[24,-106,-102,-116,-115,-95,-104,-108,-96,24,-113,-117,-105,-111,-112,-107,24,-109,-103,-99,-100,-119,24,24,-93,-114,-97,-221,-110,-101,-98,-118,-92,-90,-89,-91,24,-152,-153,-94,-132,-133,24,24,24,-308,-135,24,-154,-137,-139,-134,24,-155,-156,-136,-138,24,]),'PPPRAGMASTR':([136,],[243,]),'STATIC':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,47,51,54,58,59,60,64,66,67,106,112,113,114,115,116,133,135,198,201,209,217,222,225,227,245,284,303,304,308,309,315,316,341,],[32,-106,-102,-116,-115,-95,-104,-108,-96,32,-113,-117,-105,-111,-112,-107,32,-109,-103,-99,-100,-119,32,32,-93,-114,-97,-221,-110,-101,-98,-118,-92,-90,-89,-91,32,-152,-153,-94,-132,-133,-166,200,32,208,32,32,-308,-135,-167,286,293,32,-154,-137,-139,-134,32,-155,-156,-136,-138,340,32,363,]),'PPPRAGMA':([62,68,131,132,136,137,138,139,141,226,228,243,246,310,],[-307,136,136,136,-68,-146,-145,-142,136,136,136,-69,-143,-144,]),'LAND':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,164,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,164,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'ELLIPSIS':([217,],[302,]),'INT_CONST_HEX':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,86,-307,-269,-267,-266,86,-268,-265,86,86,-270,86,86,-27,-166,-28,-309,-309,86,-266,86,-226,-229,-227,86,-228,-230,-233,-224,-231,-234,-225,-232,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-167,-309,-28,86,-309,-28,86,-266,86,86,86,86,86,86,-266,86,86,-266,86,-309,86,86,86,-309,-309,-28,86,-11,-12,86,86,86,86,-266,86,-309,-182,-309,86,-11,-309,]),'GE':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,169,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,169,-244,-241,-242,169,-239,-249,169,-245,-248,-240,169,169,-246,-247,-243,169,169,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'NE':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,171,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,171,-244,-241,-242,171,-239,-249,-250,-245,-248,-240,-251,171,-246,-247,-243,171,171,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'SHORT':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[7,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,7,-109,-103,-99,-100,-119,-309,7,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,7,-152,-153,-307,-86,-94,-88,-132,-133,7,7,-166,7,7,7,7,7,-308,7,-135,-68,-146,-145,-142,7,7,-130,7,7,7,7,7,-167,7,-154,-137,7,-139,7,-128,-129,-69,-131,-134,-143,7,-155,-156,-136,-138,-144,7,]),'FLOAT_CONST':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,73,-307,-269,-267,-266,73,-268,-265,73,73,-270,73,73,-27,-166,-28,-309,-309,73,-266,73,-226,-229,-227,73,-228,-230,-233,-224,-231,-234,-225,-232,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-167,-309,-28,73,-309,-28,73,-266,73,73,73,73,73,73,-266,73,73,-266,73,-309,73,73,73,-309,-309,-28,73,-11,-12,73,73,73,73,-266,73,-309,-182,-309,73,-11,-309,]),'LPAREN':([1,2,4,5,6,7,8,10,12,13,14,15,16,17,18,19,20,22,24,25,29,30,32,33,34,35,36,37,41,42,45,46,47,48,50,51,53,54,55,56,58,59,60,62,64,66,67,69,70,71,72,73,74,75,76,78,79,80,81,82,83,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,109,110,111,112,114,117,122,133,134,135,142,143,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,185,186,188,189,190,192,196,197,198,199,200,201,202,208,209,210,214,216,218,219,222,224,225,227,230,233,235,236,239,240,242,244,245,270,271,273,274,275,279,280,281,283,284,285,286,287,289,291,292,293,294,296,297,298,299,300,303,304,308,309,312,313,314,315,320,321,322,323,324,326,331,332,336,337,340,341,342,345,351,352,353,356,358,359,360,361,362,363,364,366,367,368,369,371,372,374,378,382,383,386,387,390,392,393,396,],[-106,-102,-116,-115,-95,-104,-108,-96,-113,-117,-105,-111,-112,-107,58,-109,-103,-99,-100,-119,-93,-114,-97,-221,-110,-101,-98,-118,102,-92,-309,58,-90,113,-29,-89,115,-91,116,-45,58,-152,-153,-307,-94,-132,-133,-305,-303,-269,-267,-299,-266,146,147,-294,-296,-300,-295,-268,-265,-297,-298,-271,-301,180,-302,-283,146,-270,188,-284,-286,192,102,-285,-27,-166,-28,-164,113,116,115,-309,-309,102,58,-308,242,-135,-130,-195,-266,102,-226,-229,-227,102,-228,-230,-233,-224,-231,-234,-225,-232,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,102,180,180,180,102,102,-279,-280,102,-193,-306,102,284,-304,-167,-165,-309,-28,102,-309,-28,102,-266,-191,-197,-30,-154,180,-137,-139,-128,180,242,-129,316,-37,242,-131,-134,-278,-277,-276,-275,-274,180,-287,102,284,284,102,102,-266,-51,-50,102,102,-266,-36,-35,-196,-194,-192,-155,-156,-136,-138,180,316,242,-309,180,180,-272,-273,102,-309,-49,-46,-34,-31,-309,-28,102,-38,-11,-12,180,102,-47,-48,-32,-33,102,102,-266,-44,-43,-288,102,-281,-309,-182,-309,-42,-39,-282,102,-11,-40,-41,-309,]),'VOID':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[35,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,35,-109,-103,-99,-100,-119,-309,35,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,35,-152,-153,-307,-86,-94,-88,-132,-133,35,35,-166,35,35,35,35,35,-308,35,-135,-68,-146,-145,-142,35,35,-130,35,35,35,35,35,-167,35,-154,-137,35,-139,35,-128,-129,-69,-131,-134,-143,35,-155,-156,-136,-138,-144,35,]),'EXTERN':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,47,51,54,58,59,60,64,66,67,113,115,116,133,135,217,222,225,227,245,284,303,304,308,309,316,],[36,-106,-102,-116,-115,-95,-104,-108,-96,36,-113,-117,-105,-111,-112,-107,36,-109,-103,-99,-100,-119,36,36,-93,-114,-97,-221,-110,-101,-98,-118,-92,-90,-89,-91,36,-152,-153,-94,-132,-133,36,36,36,-308,-135,36,-154,-137,-139,-134,36,-155,-156,-136,-138,36,]),'WSTRING_LITERAL':([13,25,37,41,62,69,71,72,74,75,82,83,92,95,96,100,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,190,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,69,-307,-305,-269,-267,-266,69,-268,-265,69,69,-270,190,69,69,-27,-166,-28,-309,-309,69,-266,69,-226,-229,-227,69,-228,-230,-233,-224,-231,-234,-225,-232,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-306,69,-167,-309,-28,69,-309,-28,69,-266,69,69,69,69,69,69,-266,69,69,-266,69,-309,69,69,69,-309,-309,-28,69,-11,-12,69,69,69,69,-266,69,-309,-182,-309,69,-11,-309,]),'RESTRICT':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,45,47,51,54,58,59,60,62,64,66,67,68,102,106,107,112,113,114,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,200,201,208,209,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,315,316,340,341,],[37,-106,-102,-116,-115,-95,-104,-108,-96,37,-113,-117,-105,-111,-112,-107,37,-109,-103,-99,-100,-119,37,37,-93,-114,-97,-221,-110,-101,-98,-118,-92,37,-90,-89,-91,37,-152,-153,-307,-94,-132,-133,37,37,-166,37,37,37,37,37,37,37,37,-308,37,-135,-68,-146,-145,-142,37,37,-130,37,37,37,37,37,-167,37,37,37,37,37,-154,-137,37,-139,37,-128,-129,-69,-131,-134,-143,37,-155,-156,-136,-138,-144,37,37,37,37,]),'LONG':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[1,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,1,-109,-103,-99,-100,-119,-309,1,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,1,-152,-153,-307,-86,-94,-88,-132,-133,1,1,-166,1,1,1,1,1,-308,1,-135,-68,-146,-145,-142,1,1,-130,1,1,1,1,1,-167,1,-154,-137,1,-139,1,-128,-129,-69,-131,-134,-143,1,-155,-156,-136,-138,-144,1,]),'_BOOL':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[2,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,2,-109,-103,-99,-100,-119,-309,2,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,2,-152,-153,-307,-86,-94,-88,-132,-133,2,2,-166,2,2,2,2,2,-308,2,-135,-68,-146,-145,-142,2,2,-130,2,2,2,2,2,-167,2,-154,-137,2,-139,2,-128,-129,-69,-131,-134,-143,2,-155,-156,-136,-138,-144,2,]),'UNION':([0,6,10,11,13,22,24,25,26,27,28,32,36,37,38,39,40,58,62,63,65,68,102,106,113,115,116,131,132,136,137,138,139,140,141,146,147,180,192,198,217,226,228,243,246,284,310,316,],[3,-95,-96,-309,-117,-99,-100,-119,-309,3,-309,-97,-98,-118,-87,-10,-9,3,-307,-86,-88,3,3,-166,3,3,3,3,3,-68,-146,-145,-142,3,3,3,3,3,3,-167,3,3,3,-69,-143,3,-144,3,]),'MOD':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,162,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,162,162,-241,162,162,-239,162,162,162,162,-240,162,162,162,162,162,162,162,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'NOT':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,71,-307,-269,-267,-266,71,-268,-265,71,71,-270,71,71,-27,-166,-28,-309,-309,71,-266,71,-226,-229,-227,71,-228,-230,-233,-224,-231,-234,-225,-232,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-167,-309,-28,71,-309,-28,71,-266,71,71,71,71,71,71,-266,71,71,-266,71,-309,71,71,71,-309,-309,-28,71,-11,-12,71,71,71,71,-266,71,-309,-182,-309,71,-11,-309,]),'CHAR_CONST':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,91,-307,-269,-267,-266,91,-268,-265,91,91,-270,91,91,-27,-166,-28,-309,-309,91,-266,91,-226,-229,-227,91,-228,-230,-233,-224,-231,-234,-225,-232,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-167,-309,-28,91,-309,-28,91,-266,91,91,91,91,91,91,-266,91,91,-266,91,-309,91,91,91,-309,-309,-28,91,-11,-12,91,91,91,91,-266,91,-309,-182,-309,91,-11,-309,]),'LNOT':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,96,-307,-269,-267,-266,96,-268,-265,96,96,-270,96,96,-27,-166,-28,-309,-309,96,-266,96,-226,-229,-227,96,-228,-230,-233,-224,-231,-234,-225,-232,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-167,-309,-28,96,-309,-28,96,-266,96,96,96,96,96,96,-266,96,96,-266,96,-309,96,96,96,-309,-309,-28,96,-11,-12,96,96,96,96,-266,96,-309,-182,-309,96,-11,-309,]),'PLUSPLUS':([13,25,37,41,62,69,70,71,72,73,74,75,78,79,80,81,82,83,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,112,114,117,133,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,185,186,188,190,192,197,198,200,201,202,208,209,210,214,224,233,270,271,273,274,275,279,280,281,285,286,287,292,293,294,312,315,320,321,322,323,324,326,340,341,342,351,352,353,356,362,363,364,368,369,371,372,374,378,386,387,390,396,],[-117,-119,-118,75,-307,-305,-303,-269,-267,-299,-266,75,-294,-296,-300,-295,-268,-265,-297,-298,-271,-301,75,-302,-283,75,-270,185,-284,-286,75,75,-285,-27,-166,-28,-309,-309,75,-308,-266,75,-226,-229,-227,75,-228,-230,-233,-224,-231,-234,-225,-232,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-279,-280,75,-306,75,-304,-167,-309,-28,75,-309,-28,75,-266,75,75,-278,-277,-276,-275,-274,75,-287,75,75,75,-266,75,75,-266,75,-309,75,75,-272,-273,75,-309,-309,-28,75,-11,-12,75,75,75,75,-266,-288,75,-281,-309,-182,-309,-282,75,-11,-309,]),'EQ':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,167,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,167,-244,-241,-242,167,-239,-249,-250,-245,-248,-240,-251,167,-246,-247,-243,167,167,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'OFFSETOF':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,76,-307,-269,-267,-266,76,-268,-265,76,76,-270,76,76,-27,-166,-28,-309,-309,76,-266,76,-226,-229,-227,76,-228,-230,-233,-224,-231,-234,-225,-232,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-167,-309,-28,76,-309,-28,76,-266,76,76,76,76,76,76,-266,76,76,-266,76,-309,76,76,76,-309,-309,-28,76,-11,-12,76,76,76,76,-266,76,-309,-182,-309,76,-11,-309,]),'XOREQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,158,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'LSHIFT':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,168,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,168,-244,-241,-242,168,-239,168,168,-245,168,-240,168,168,168,168,-243,168,168,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'SEMI':([1,2,4,5,7,8,12,13,14,15,16,17,19,20,25,30,33,34,35,37,50,53,59,60,62,66,67,68,69,70,73,78,79,80,81,85,86,89,90,91,93,94,97,99,100,103,104,111,131,132,133,134,135,136,137,138,139,141,142,145,179,181,182,185,186,190,191,197,219,222,225,226,227,228,229,230,231,232,234,236,237,238,239,240,241,243,244,245,246,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,296,297,303,304,307,308,309,310,311,313,322,323,325,327,336,337,338,339,345,348,360,361,366,367,368,371,382,383,386,392,393,],[-106,-102,-116,-115,-104,-108,-113,-117,-105,-111,-112,-107,-109,-103,-119,-114,-221,-110,-101,-118,-29,-52,-152,-153,-307,-132,-133,138,-305,-303,-299,-294,-296,-300,-295,-236,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-53,138,138,-308,-309,-135,-68,-146,-145,-142,138,-130,-260,-257,-262,-261,-279,-280,-306,-263,-304,-30,-154,-137,138,-139,138,-163,-128,-25,310,-149,-129,-26,-147,-54,-37,-162,-69,-131,-134,-143,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,-278,-277,-276,-275,-274,-287,-36,-35,-155,-156,-235,-136,-138,-144,-151,-55,-272,-273,-264,-258,-34,-31,-150,-148,-38,-237,-32,-33,-44,-43,-288,-281,-42,-39,-282,-40,-41,]),'INT_CONST_BIN':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,89,-307,-269,-267,-266,89,-268,-265,89,89,-270,89,89,-27,-166,-28,-309,-309,89,-266,89,-226,-229,-227,89,-228,-230,-233,-224,-231,-234,-225,-232,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-167,-309,-28,89,-309,-28,89,-266,89,89,89,89,89,89,-266,89,89,-266,89,-309,89,89,89,-309,-309,-28,89,-11,-12,89,89,89,89,-266,89,-309,-182,-309,89,-11,-309,]),'DIVEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,150,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'XOR':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,172,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,172,-244,-241,-242,172,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,172,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'ARROW':([69,70,73,78,79,80,81,86,89,90,91,93,94,97,99,100,103,133,185,186,190,197,270,271,273,274,275,280,322,323,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-297,-298,-271,-301,-302,-283,183,-284,-286,-285,-308,-279,-280,-306,-304,-278,-277,-276,-275,-274,-287,-272,-273,-288,-281,-282,]),'STRING_LITERAL':([13,25,37,41,62,70,71,72,74,75,82,83,92,95,96,101,102,103,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,197,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,70,-307,-303,-269,-267,-266,70,-268,-265,70,70,-270,70,70,197,-27,-166,-28,-309,-309,70,-266,70,-226,-229,-227,70,-228,-230,-233,-224,-231,-234,-225,-232,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-304,-167,-309,-28,70,-309,-28,70,-266,70,70,70,70,70,70,-266,70,70,-266,70,-309,70,70,70,-309,-309,-28,70,-11,-12,70,70,70,70,-266,70,-309,-182,-309,70,-11,-309,]),'UNSIGNED':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[15,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,15,-109,-103,-99,-100,-119,-309,15,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,15,-152,-153,-307,-86,-94,-88,-132,-133,15,15,-166,15,15,15,15,15,-308,15,-135,-68,-146,-145,-142,15,15,-130,15,15,15,15,15,-167,15,-154,-137,15,-139,15,-128,-129,-69,-131,-134,-143,15,-155,-156,-136,-138,-144,15,]),'INT_CONST_DEC':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,81,-307,-269,-267,-266,81,-268,-265,81,81,-270,81,81,-27,-166,-28,-309,-309,81,-266,81,-226,-229,-227,81,-228,-230,-233,-224,-231,-234,-225,-232,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-167,-309,-28,81,-309,-28,81,-266,81,81,81,81,81,81,-266,81,81,-266,81,-309,81,81,81,-309,-309,-28,81,-11,-12,81,81,81,81,-266,81,-309,-182,-309,81,-11,-309,]),'RBRACKET':([13,25,37,41,69,70,73,74,77,78,79,80,81,84,85,86,87,88,89,90,91,93,94,97,98,99,100,103,104,105,106,112,114,117,133,145,179,181,182,185,186,190,191,195,197,198,201,202,209,210,214,215,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,272,273,274,275,280,287,288,294,295,307,315,322,323,325,327,328,329,330,334,335,341,342,348,364,365,368,371,373,380,381,384,386,],[-117,-119,-118,-309,-305,-303,-299,143,-4,-294,-296,-300,-295,-257,-236,-297,-3,-222,-298,-271,-301,-302,-283,-259,189,-284,-286,-285,-238,-27,-166,-309,-309,-309,-308,-260,-257,-262,-261,-279,-280,-306,-263,-219,-304,-167,-28,-309,-28,-309,299,300,-223,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,-278,-277,322,-276,-275,-274,-287,331,332,336,337,-235,-309,-272,-273,-264,-258,-220,358,359,360,361,-28,-309,-237,382,383,-288,-281,388,392,393,394,-282,]),'PERIOD':([62,69,70,73,78,79,80,81,86,89,90,91,93,94,97,99,100,103,133,185,186,190,197,270,271,273,274,275,280,322,323,326,346,347,354,357,368,371,372,375,376,378,385,386,388,394,396,],[-307,-305,-303,-299,-294,-296,-300,-295,-297,-298,-271,-301,-302,-283,187,-284,-286,-285,-308,-279,-280,-306,-304,-278,-277,-276,-275,-274,-287,-272,-273,355,370,-289,355,-183,-288,-281,355,-184,-186,355,-290,-282,-185,-291,355,]),'MINUS':([13,25,37,41,62,69,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,112,114,117,133,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,188,190,191,192,197,198,200,201,202,208,209,210,214,224,233,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,279,280,281,285,286,287,292,293,294,312,315,320,321,322,323,324,325,326,327,340,341,342,351,352,353,356,362,363,364,368,369,371,372,374,378,386,387,390,396,],[-117,-119,-118,82,-307,-305,-303,-269,-267,-299,-266,82,-294,-296,-300,-295,-268,-265,-257,176,-297,-298,-271,-301,82,-302,-283,82,-270,-259,-284,-286,82,82,-285,-238,-27,-166,-28,-309,-309,82,-308,-266,-260,82,-226,-229,-227,82,-228,-230,-233,-224,-231,-234,-225,-232,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-257,82,-262,-261,82,-279,-280,82,-306,-263,82,-304,-167,-309,-28,82,-309,-28,82,-266,82,82,176,176,-241,-242,176,-239,176,176,176,176,-240,176,176,176,176,-243,176,176,-278,-277,-276,-275,-274,82,-287,82,82,82,-266,82,82,-266,82,-309,82,82,-272,-273,82,-264,-309,-258,-309,-28,82,-11,-12,82,82,82,82,-266,-288,82,-281,-309,-182,-309,-282,82,-11,-309,]),'AND':([13,25,37,41,62,69,70,71,72,73,74,75,78,79,80,81,82,83,84,85,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,104,105,106,107,112,114,117,133,144,145,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,184,185,186,188,190,191,192,197,198,200,201,202,208,209,210,214,224,233,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,279,280,281,285,286,287,292,293,294,312,315,320,321,322,323,324,325,326,327,340,341,342,351,352,353,356,362,363,364,368,369,371,372,374,378,386,387,390,396,],[-117,-119,-118,83,-307,-305,-303,-269,-267,-299,-266,83,-294,-296,-300,-295,-268,-265,-257,177,-297,-298,-271,-301,83,-302,-283,83,-270,-259,-284,-286,83,83,-285,-238,-27,-166,-28,-309,-309,83,-308,-266,-260,83,-226,-229,-227,83,-228,-230,-233,-224,-231,-234,-225,-232,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-257,83,-262,-261,83,-279,-280,83,-306,-263,83,-304,-167,-309,-28,83,-309,-28,83,-266,83,83,177,-244,-241,-242,177,-239,-249,-250,-245,-248,-240,-251,177,-246,-247,-243,-252,177,-278,-277,-276,-275,-274,83,-287,83,83,83,-266,83,83,-266,83,-309,83,83,-272,-273,83,-264,-309,-258,-309,-28,83,-11,-12,83,83,83,83,-266,-288,83,-281,-309,-182,-309,-282,83,-11,-309,]),'SIZEOF':([13,25,37,41,62,71,72,74,75,82,83,92,95,96,101,102,105,106,107,112,114,117,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,198,200,201,202,208,209,210,214,224,233,279,281,285,286,287,292,293,294,312,315,320,321,324,326,340,341,342,351,352,353,356,362,363,364,369,372,374,378,387,390,396,],[-117,-119,-118,101,-307,-269,-267,-266,101,-268,-265,101,101,-270,101,101,-27,-166,-28,-309,-309,101,-266,101,-226,-229,-227,101,-228,-230,-233,-224,-231,-234,-225,-232,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-167,-309,-28,101,-309,-28,101,-266,101,101,101,101,101,101,-266,101,101,-266,101,-309,101,101,101,-309,-309,-28,101,-11,-12,101,101,101,101,-266,101,-309,-182,-309,101,-11,-309,]),'RSHIFT':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,161,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,161,-244,-241,-242,161,-239,161,161,-245,161,-240,161,161,161,161,-243,161,161,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'REGISTER':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,47,51,54,58,59,60,64,66,67,113,115,116,133,135,217,222,225,227,245,284,303,304,308,309,316,],[10,-106,-102,-116,-115,-95,-104,-108,-96,10,-113,-117,-105,-111,-112,-107,10,-109,-103,-99,-100,-119,10,10,-93,-114,-97,-221,-110,-101,-98,-118,-92,-90,-89,-91,10,-152,-153,-94,-132,-133,10,10,10,-308,-135,10,-154,-137,-139,-134,10,-155,-156,-136,-138,10,]),'PLUSEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,149,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'MINUSEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,153,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'RBRACE':([62,68,69,70,73,78,79,80,81,84,85,86,88,89,90,91,93,94,97,99,100,103,104,128,129,130,131,132,133,136,137,138,139,141,145,179,181,182,185,186,190,191,197,220,221,223,226,228,243,246,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,305,306,307,310,322,323,325,327,348,350,368,371,372,377,378,379,386,389,390,391,395,396,397,398,],[-307,133,-305,-303,-299,-294,-296,-300,-295,-257,-236,-297,-222,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,133,-157,-160,133,133,-308,-68,-146,-145,-142,133,-260,-257,-262,-261,-279,-280,-306,-263,-304,133,133,-158,133,133,-69,-143,-223,-256,-244,-241,-242,-255,-239,-249,-250,-245,-248,-240,-251,-254,-246,-247,-243,-252,-253,-278,-277,-276,-275,-274,-287,-159,-161,-235,-144,-272,-273,-264,-258,-237,133,-288,-281,133,-180,-309,-177,-282,-22,-21,133,-181,133,-178,-179,]),'MODEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,152,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'VOLATILE':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,28,29,30,32,33,34,35,36,37,42,45,47,51,54,58,59,60,62,64,66,67,68,102,106,107,112,113,114,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,200,201,208,209,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,315,316,340,341,],[25,-106,-102,-116,-115,-95,-104,-108,-96,25,-113,-117,-105,-111,-112,-107,25,-109,-103,-99,-100,-119,25,25,-93,-114,-97,-221,-110,-101,-98,-118,-92,25,-90,-89,-91,25,-152,-153,-307,-94,-132,-133,25,25,-166,25,25,25,25,25,25,25,25,-308,25,-135,-68,-146,-145,-142,25,25,-130,25,25,25,25,25,-167,25,25,25,25,25,-154,-137,25,-139,25,-128,-129,-69,-131,-134,-143,25,-155,-156,-136,-138,-144,25,25,25,25,]),'DIVIDE':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,170,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,170,170,-241,170,170,-239,170,170,170,170,-240,170,170,170,170,170,170,170,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'MINUSMINUS':([13,25,37,41,62,69,70,71,72,73,74,75,78,79,80,81,82,83,86,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,112,114,117,133,144,146,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,185,186,188,190,192,197,198,200,201,202,208,209,210,214,224,233,270,271,273,274,275,279,280,281,285,286,287,292,293,294,312,315,320,321,322,323,324,326,340,341,342,351,352,353,356,362,363,364,368,369,371,372,374,378,386,387,390,396,],[-117,-119,-118,95,-307,-305,-303,-269,-267,-299,-266,95,-294,-296,-300,-295,-268,-265,-297,-298,-271,-301,95,-302,-283,95,-270,186,-284,-286,95,95,-285,-27,-166,-28,-309,-309,95,-308,-266,95,-226,-229,-227,95,-228,-230,-233,-224,-231,-234,-225,-232,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-279,-280,95,-306,95,-304,-167,-309,-28,95,-309,-28,95,-266,95,95,-278,-277,-276,-275,-274,95,-287,95,95,95,-266,95,95,-266,95,-309,95,95,-272,-273,95,-309,-309,-28,95,-11,-12,95,95,95,95,-266,-288,95,-281,-309,-182,-309,-282,95,-11,-309,]),'LT':([69,70,73,78,79,80,81,84,85,86,89,90,91,93,94,97,99,100,103,104,133,145,179,181,182,185,186,190,191,197,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,266,267,268,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,-257,173,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-238,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,173,-244,-241,-242,173,-239,-249,173,-245,-248,-240,173,173,-246,-247,-243,173,173,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'TYPEID':([0,1,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,42,45,46,47,51,54,58,59,60,62,63,64,65,66,67,68,102,105,106,107,108,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,183,187,192,198,199,217,222,225,226,227,228,230,235,236,242,243,244,245,246,284,303,304,308,309,310,314,316,],[33,-106,-102,-141,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,56,-109,-103,60,-99,-140,-100,-119,-309,33,-309,-93,-114,67,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-309,56,-90,-89,-91,33,-152,-153,-307,-86,-94,-88,-132,-133,33,33,-27,-166,-28,-164,33,33,33,33,33,-308,240,-135,-68,-146,-145,-142,33,33,-130,33,33,33,270,273,33,-167,-165,33,-154,-137,33,-139,33,-128,240,-129,240,-69,-131,-134,-143,33,-155,-156,-136,-138,-144,240,33,]),'SIGNED':([0,1,2,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,22,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,42,47,51,54,58,59,60,62,63,64,65,66,67,68,102,106,113,115,116,131,132,133,134,135,136,137,138,139,140,141,142,146,147,180,192,196,198,217,222,225,226,227,228,230,236,243,244,245,246,284,303,304,308,309,310,316,],[34,-106,-102,-116,-115,-95,-104,-108,-96,-309,-113,-117,-105,-111,-112,-107,34,-109,-103,-99,-100,-119,-309,34,-309,-93,-114,-97,-221,-110,-101,-98,-118,-87,-10,-9,-92,-90,-89,-91,34,-152,-153,-307,-86,-94,-88,-132,-133,34,34,-166,34,34,34,34,34,-308,34,-135,-68,-146,-145,-142,34,34,-130,34,34,34,34,34,-167,34,-154,-137,34,-139,34,-128,-129,-69,-131,-134,-143,34,-155,-156,-136,-138,-144,34,]),'LSHIFTEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,156,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),'LBRACKET':([1,2,4,5,6,7,8,10,12,13,14,15,16,17,18,19,20,22,24,25,29,30,32,33,34,35,36,37,42,45,46,47,48,50,51,53,54,55,56,58,59,60,62,64,66,67,69,70,73,78,79,80,81,86,89,90,91,93,94,97,99,100,103,105,106,107,108,109,110,111,122,133,135,142,143,185,186,189,190,196,197,198,199,216,218,219,222,225,227,230,236,239,240,244,245,270,271,273,274,275,280,283,284,289,291,296,297,298,299,300,303,304,308,309,313,322,323,326,331,332,336,337,345,346,347,354,357,358,359,360,361,366,367,368,371,372,375,376,378,382,383,385,386,388,392,393,394,396,],[-106,-102,-116,-115,-95,-104,-108,-96,-113,-117,-105,-111,-112,-107,41,-109,-103,-99,-100,-119,-93,-114,-97,-221,-110,-101,-98,-118,-92,-309,41,-90,112,-29,-89,114,-91,117,-45,41,-152,-153,-307,-94,-132,-133,-305,-303,-299,-294,-296,-300,-295,-297,-298,-271,-301,-302,-283,184,-284,-286,-285,-27,-166,-28,-164,112,117,114,41,-308,-135,-130,-195,-279,-280,-193,-306,41,-304,-167,-165,-191,-197,-30,-154,-137,-139,-128,-129,315,-37,-131,-134,-278,-277,-276,-275,-274,-287,41,41,-51,-50,-36,-35,-196,-194,-192,-155,-156,-136,-138,315,-272,-273,353,-49,-46,-34,-31,-38,369,-289,353,-183,-47,-48,-32,-33,-44,-43,-288,-281,353,-184,-186,353,-42,-39,-290,-282,-185,-40,-41,-291,353,]),'EQUALS':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,130,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,354,357,368,371,375,376,386,388,],[-305,-303,-299,-294,-296,-300,-295,155,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,224,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,374,-183,-288,-281,-184,-186,-282,-185,]),'RSHIFTEQUAL':([69,70,73,78,79,80,81,84,86,89,90,91,93,94,97,99,100,103,133,145,179,181,182,185,186,190,191,197,270,271,273,274,275,280,322,323,325,327,368,371,386,],[-305,-303,-299,-294,-296,-300,-295,159,-297,-298,-271,-301,-302,-283,-259,-284,-286,-285,-308,-260,-257,-262,-261,-279,-280,-306,-263,-304,-278,-277,-276,-275,-274,-287,-272,-273,-264,-258,-288,-281,-282,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([102,146,175,180,184,192,369,],[194,194,265,194,272,194,384,]),'initializer':([356,387,],[377,395,]),'designator_list':([326,372,378,396,],[354,354,354,354,]),'typeid_declarator':([134,242,314,],[229,317,229,]),'type_specifier_no_typeid':([0,18,27,58,68,102,113,115,116,131,132,134,140,141,146,147,180,192,196,217,226,228,284,316,],[4,42,4,4,4,4,4,4,4,4,4,230,4,4,4,4,4,4,230,4,4,4,4,4,]),'abstract_declarator':([18,58,196,284,],[43,118,43,118,]),'struct_or_union_specifier':([0,27,58,68,102,113,115,116,131,132,140,141,146,147,180,192,217,226,228,284,316,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'direct_abstract_declarator':([18,46,58,122,196,283,284,],[55,110,55,110,55,110,55,]),'typeid_noparen_declarator':([18,],[44,]),'designation':([326,372,378,396,],[352,352,352,352,]),'initializer_list':([326,378,],[350,389,]),'identifier_list':([113,115,316,],[204,204,204,]),'enumerator':([61,126,127,223,],[129,129,129,305,]),'identifier_list_opt':([113,115,316,],[203,211,343,]),'struct_declarator_list_opt':([134,],[232,]),'parameter_declaration':([0,58,113,115,116,217,284,316,],[9,119,119,119,119,301,119,119,]),'unified_string_literal':([41,75,92,95,101,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'storage_class_specifier':([0,11,18,26,28,58,113,115,116,217,284,316,],[11,11,47,11,11,11,11,11,11,11,11,11,]),'assignment_operator':([84,],[151,]),'typedef_name':([0,27,58,68,102,113,115,116,131,132,140,141,146,147,180,192,217,226,228,284,316,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'type_name':([102,146,147,180,192,],[193,247,248,269,278,]),'declaration_specifiers_no_type_opt':([11,26,28,],[38,63,65,]),'parameter_list':([58,113,115,116,284,316,],[120,120,120,120,120,120,]),'direct_typeid_noparen_declarator':([18,46,],[48,109,]),'struct_declaration':([68,131,132,141,226,228,],[139,139,139,246,246,246,]),'identifier':([41,75,92,95,101,102,113,115,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,290,292,293,312,316,319,320,321,324,342,353,355,356,362,363,369,370,387,],[94,94,94,94,94,94,205,205,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,333,94,94,94,205,347,94,94,94,94,94,376,94,94,94,94,385,94,]),'constant_expression':([224,233,312,353,],[306,311,338,373,]),'pppragma_directive':([68,131,132,141,226,228,],[137,137,137,137,137,137,]),'argument_expression_list':([188,],[276,]),'struct_declaration_list':([68,131,132,],[141,226,228,]),'declaration_specifiers':([0,58,113,115,116,217,284,316,],[18,18,18,18,18,18,18,18,]),'unary_expression':([41,75,92,95,101,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[84,145,179,182,191,84,84,84,84,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,84,179,179,179,84,84,84,84,84,84,179,179,179,84,84,84,84,84,179,179,179,84,84,179,84,84,84,84,84,]),'binary_expression':([41,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,281,285,286,292,293,312,320,324,342,353,356,362,363,369,387,],[85,85,85,85,85,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,85,266,267,268,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'type_qualifier_list_opt':([45,112,114,200,208,315,340,],[108,202,210,285,292,342,362,]),'pointer':([18,58,108,134,196,242,284,314,],[46,122,199,235,283,235,283,235,]),'declarator':([134,314,],[234,234,]),'empty':([11,18,26,28,41,45,58,112,113,114,115,116,117,134,196,200,202,208,210,284,315,316,326,340,342,372,378,396,],[40,49,40,40,87,105,123,105,206,105,206,123,87,231,49,105,87,105,87,123,105,206,351,105,87,351,390,351,]),'conditional_expression':([41,102,117,146,151,175,180,184,188,192,202,210,224,233,281,285,286,292,293,312,320,324,342,353,356,362,363,369,387,],[88,88,88,88,88,88,88,88,88,88,88,88,307,307,88,88,88,88,88,307,348,88,88,307,88,88,88,88,88,]),'struct_declarator':([134,314,],[238,339,]),'primary_expression':([41,75,92,95,101,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'specifier_qualifier_list':([68,102,131,132,141,146,147,180,192,226,228,],[134,196,134,134,134,196,196,196,196,134,134,]),'offsetof_member_designator':([319,],[346,]),'declaration_specifiers_no_type':([0,11,26,28,58,113,115,116,217,284,316,],[27,39,39,39,27,27,27,27,27,27,27,]),'type_qualifier':([0,11,18,26,28,45,58,68,102,107,112,113,114,115,116,131,132,134,140,141,146,147,180,192,196,200,201,208,209,217,226,228,284,315,316,340,341,],[26,26,51,26,26,106,26,106,106,198,106,26,106,26,26,106,106,236,198,106,106,106,106,106,236,106,198,106,198,26,106,106,26,106,26,106,198,]),'struct_declarator_list':([134,],[237,]),'abstract_declarator_opt':([18,196,],[52,282,]),'direct_id_declarator':([18,46,58,122,134,235,242,314,],[53,111,53,111,53,111,53,53,]),'function_specifier':([0,11,18,26,28,58,113,115,116,217,284,316,],[28,28,54,28,28,28,28,28,28,28,28,28,]),'designator':([326,354,372,378,396,],[357,375,357,357,357,]),'parameter_type_list':([58,113,115,116,284,316,],[124,207,212,124,124,344,]),'brace_open':([21,31,59,60,66,67,279,318,321,325,356,387,],[61,68,126,127,131,132,326,326,326,326,378,378,]),'direct_typeid_declarator':([134,235,242,314,],[239,313,239,239,]),'enum_specifier':([0,27,58,68,102,113,115,116,131,132,140,141,146,147,180,192,217,226,228,284,316,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'struct_or_union':([0,27,58,68,102,113,115,116,131,132,140,141,146,147,180,192,217,226,228,284,316,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'unary_operator':([41,75,92,95,101,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'type_specifier':([0,27,58,68,102,113,115,116,131,132,140,141,146,147,180,192,217,226,228,284,316,],[29,64,29,142,142,29,29,29,142,142,244,142,142,142,142,142,29,142,142,29,29,]),'brace_close':([68,128,131,132,141,220,221,226,228,350,372,391,396,],[135,222,225,227,245,303,304,308,309,371,386,397,398,]),'postfix_expression':([41,75,92,95,101,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'designation_opt':([326,372,378,396,],[356,387,356,387,]),'id_declarator':([18,58,134,242,314,],[57,125,241,125,241,]),'assignment_expression_opt':([41,117,202,210,342,],[98,215,288,295,365,]),'constant':([41,75,92,95,101,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'enumerator_list':([61,126,127,],[128,220,221,]),'unified_wstring_literal':([41,75,92,95,101,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,]),'assignment_expression':([41,102,117,146,151,175,180,184,188,192,202,210,281,285,286,292,293,324,342,356,362,363,369,387,],[77,195,77,195,249,195,195,195,277,195,77,77,328,329,330,334,335,349,77,379,380,381,195,379,]),'type_qualifier_list':([45,68,102,112,114,131,132,141,146,147,180,192,200,208,226,228,315,340,],[107,140,140,201,209,140,140,140,140,140,140,140,107,107,140,140,341,107,]),'initializer_list_opt':([378,],[391,]),'parameter_type_list_opt':([58,116,284,],[121,213,121,]),'cast_expression':([41,92,102,117,146,151,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,184,188,192,202,210,224,233,279,281,285,286,292,293,312,320,321,324,342,353,356,362,363,369,387,],[104,181,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,327,104,104,104,104,104,104,104,327,104,104,104,104,104,104,104,104,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> parameter_declaration","S'",1,None,None,None),
  ('abstract_declarator_opt -> empty','abstract_declarator_opt',1,'p_abstract_declarator_opt','plyparser.py',43),
  ('abstract_declarator_opt -> abstract_declarator','abstract_declarator_opt',1,'p_abstract_declarator_opt','plyparser.py',44),
  ('assignment_expression_opt -> empty','assignment_expression_opt',1,'p_assignment_expression_opt','plyparser.py',43),
  ('assignment_expression_opt -> assignment_expression','assignment_expression_opt',1,'p_assignment_expression_opt','plyparser.py',44),
  ('block_item_list_opt -> empty','block_item_list_opt',1,'p_block_item_list_opt','plyparser.py',43),
  ('block_item_list_opt -> block_item_list','block_item_list_opt',1,'p_block_item_list_opt','plyparser.py',44),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','plyparser.py',43),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','plyparser.py',44),
  ('declaration_specifiers_no_type_opt -> empty','declaration_specifiers_no_type_opt',1,'p_declaration_specifiers_no_type_opt','plyparser.py',43),
  ('declaration_specifiers_no_type_opt -> declaration_specifiers_no_type','declaration_specifiers_no_type_opt',1,'p_declaration_specifiers_no_type_opt','plyparser.py',44),
  ('designation_opt -> empty','designation_opt',1,'p_designation_opt','plyparser.py',43),
  ('designation_opt -> designation','designation_opt',1,'p_designation_opt','plyparser.py',44),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','plyparser.py',43),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','plyparser.py',44),
  ('id_init_declarator_list_opt -> empty','id_init_declarator_list_opt',1,'p_id_init_declarator_list_opt','plyparser.py',43),
  ('id_init_declarator_list_opt -> id_init_declarator_list','id_init_declarator_list_opt',1,'p_id_init_declarator_list_opt','plyparser.py',44),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','plyparser.py',43),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','plyparser.py',44),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','plyparser.py',43),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','plyparser.py',44),
  ('initializer_list_opt -> empty','initializer_list_opt',1,'p_initializer_list_opt','plyparser.py',43),
  ('initializer_list_opt -> initializer_list','initializer_list_opt',1,'p_initializer_list_opt','plyparser.py',44),
  ('parameter_type_list_opt -> empty','parameter_type_list_opt',1,'p_parameter_type_list_opt','plyparser.py',43),
  ('parameter_type_list_opt -> parameter_type_list','parameter_type_list_opt',1,'p_parameter_type_list_opt','plyparser.py',44),
  ('struct_declarator_list_opt -> empty','struct_declarator_list_opt',1,'p_struct_declarator_list_opt','plyparser.py',43),
  ('struct_declarator_list_opt -> struct_declarator_list','struct_declarator_list_opt',1,'p_struct_declarator_list_opt','plyparser.py',44),
  ('type_qualifier_list_opt -> empty','type_qualifier_list_opt',1,'p_type_qualifier_list_opt','plyparser.py',43),
  ('type_qualifier_list_opt -> type_qualifier_list','type_qualifier_list_opt',1,'p_type_qualifier_list_opt','plyparser.py',44),
  ('direct_id_declarator -> ID','direct_id_declarator',1,'p_direct_id_declarator_1','plyparser.py',126),
  ('direct_id_declarator -> LPAREN id_declarator RPAREN','direct_id_declarator',3,'p_direct_id_declarator_2','plyparser.py',126),
  ('direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET','direct_id_declarator',5,'p_direct_id_declarator_3','plyparser.py',126),
  ('direct_id_declarator -> direct_id_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET','direct_id_declarator',6,'p_direct_id_declarator_4','plyparser.py',126),
  ('direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET','direct_id_declarator',6,'p_direct_id_declarator_4','plyparser.py',127),
  ('direct_id_declarator -> direct_id_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET','direct_id_declarator',5,'p_direct_id_declarator_5','plyparser.py',126),
  ('direct_id_declarator -> direct_id_declarator LPAREN parameter_type_list RPAREN','direct_id_declarator',4,'p_direct_id_declarator_6','plyparser.py',126),
  ('direct_id_declarator -> direct_id_declarator LPAREN identifier_list_opt RPAREN','direct_id_declarator',4,'p_direct_id_declarator_6','plyparser.py',127),
  ('direct_typeid_declarator -> TYPEID','direct_typeid_declarator',1,'p_direct_typeid_declarator_1','plyparser.py',126),
  ('direct_typeid_declarator -> LPAREN typeid_declarator RPAREN','direct_typeid_declarator',3,'p_direct_typeid_declarator_2','plyparser.py',126),
  ('direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET','direct_typeid_declarator',5,'p_direct_typeid_declarator_3','plyparser.py',126),
  ('direct_typeid_declarator -> direct_typeid_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET','direct_typeid_declarator',6,'p_direct_typeid_declarator_4','plyparser.py',126),
  ('direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET','direct_typeid_declarator',6,'p_direct_typeid_declarator_4','plyparser.py',127),
  ('direct_typeid_declarator -> direct_typeid_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET','direct_typeid_declarator',5,'p_direct_typeid_declarator_5','plyparser.py',126),
  ('direct_typeid_declarator -> direct_typeid_declarator LPAREN parameter_type_list RPAREN','direct_typeid_declarator',4,'p_direct_typeid_declarator_6','plyparser.py',126),
  ('direct_typeid_declarator -> direct_typeid_declarator LPAREN identifier_list_opt RPAREN','direct_typeid_declarator',4,'p_direct_typeid_declarator_6','plyparser.py',127),
  ('direct_typeid_noparen_declarator -> TYPEID','direct_typeid_noparen_declarator',1,'p_direct_typeid_noparen_declarator_1','plyparser.py',126),
  ('direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt assignment_expression_opt RBRACKET','direct_typeid_noparen_declarator',5,'p_direct_typeid_noparen_declarator_3','plyparser.py',126),
  ('direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET STATIC type_qualifier_list_opt assignment_expression RBRACKET','direct_typeid_noparen_declarator',6,'p_direct_typeid_noparen_declarator_4','plyparser.py',126),
  ('direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list STATIC assignment_expression RBRACKET','direct_typeid_noparen_declarator',6,'p_direct_typeid_noparen_declarator_4','plyparser.py',127),
  ('direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LBRACKET type_qualifier_list_opt TIMES RBRACKET','direct_typeid_noparen_declarator',5,'p_direct_typeid_noparen_declarator_5','plyparser.py',126),
  ('direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN parameter_type_list RPAREN','direct_typeid_noparen_declarator',4,'p_direct_typeid_noparen_declarator_6','plyparser.py',126),
  ('direct_typeid_noparen_declarator -> direct_typeid_noparen_declarator LPAREN identifier_list_opt RPAREN','direct_typeid_noparen_declarator',4,'p_direct_typeid_noparen_declarator_6','plyparser.py',127),
  ('id_declarator -> direct_id_declarator','id_declarator',1,'p_id_declarator_1','plyparser.py',126),
  ('id_declarator -> pointer direct_id_declarator','id_declarator',2,'p_id_declarator_2','plyparser.py',126),
  ('typeid_declarator -> direct_typeid_declarator','typeid_declarator',1,'p_typeid_declarator_1','plyparser.py',126),
  ('typeid_declarator -> pointer direct_typeid_declarator','typeid_declarator',2,'p_typeid_declarator_2','plyparser.py',126),
  ('typeid_noparen_declarator -> direct_typeid_noparen_declarator','typeid_noparen_declarator',1,'p_typeid_noparen_declarator_1','plyparser.py',126),
  ('typeid_noparen_declarator -> pointer direct_typeid_noparen_declarator','typeid_noparen_declarator',2,'p_typeid_noparen_declarator_2','plyparser.py',126),
  ('translation_unit_or_empty -> translation_unit','translation_unit_or_empty',1,'p_translation_unit_or_empty','c_parser.py',514),
  ('translation_unit_or_empty -> empty','translation_unit_or_empty',1,'p_translation_unit_or_empty','c_parser.py',515),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit_1','c_parser.py',523),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit_2','c_parser.py',530),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration_1','c_parser.py',542),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration_2','c_parser.py',547),
  ('external_declaration -> pp_directive','external_declaration',1,'p_external_declaration_3','c_parser.py',552),
  ('external_declaration -> pppragma_directive','external_declaration',1,'p_external_declaration_3','c_parser.py',553),
  ('external_declaration -> SEMI','external_declaration',1,'p_external_declaration_4','c_parser.py',558),
  ('pp_directive -> PPHASH','pp_directive',1,'p_pp_directive','c_parser.py',563),
  ('pppragma_directive -> PPPRAGMA','pppragma_directive',1,'p_pppragma_directive','c_parser.py',569),
  ('pppragma_directive -> PPPRAGMA PPPRAGMASTR','pppragma_directive',2,'p_pppragma_directive','c_parser.py',570),
  ('function_definition -> id_declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition_1','c_parser.py',581),
  ('function_definition -> declaration_specifiers id_declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition_2','c_parser.py',598),
  ('statement -> labeled_statement','statement',1,'p_statement','c_parser.py',609),
  ('statement -> expression_statement','statement',1,'p_statement','c_parser.py',610),
  ('statement -> compound_statement','statement',1,'p_statement','c_parser.py',611),
  ('statement -> selection_statement','statement',1,'p_statement','c_parser.py',612),
  ('statement -> iteration_statement','statement',1,'p_statement','c_parser.py',613),
  ('statement -> jump_statement','statement',1,'p_statement','c_parser.py',614),
  ('statement -> pppragma_directive','statement',1,'p_statement','c_parser.py',615),
  ('pragmacomp_or_statement -> pppragma_directive statement','pragmacomp_or_statement',2,'p_pragmacomp_or_statement','c_parser.py',662),
  ('pragmacomp_or_statement -> statement','pragmacomp_or_statement',1,'p_pragmacomp_or_statement','c_parser.py',663),
  ('decl_body -> declaration_specifiers init_declarator_list_opt','decl_body',2,'p_decl_body','c_parser.py',682),
  ('decl_body -> declaration_specifiers_no_type id_init_declarator_list_opt','decl_body',2,'p_decl_body','c_parser.py',683),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','c_parser.py',742),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','c_parser.py',751),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','c_parser.py',752),
  ('declaration_specifiers_no_type -> type_qualifier declaration_specifiers_no_type_opt','declaration_specifiers_no_type',2,'p_declaration_specifiers_no_type_1','c_parser.py',762),
  ('declaration_specifiers_no_type -> storage_class_specifier declaration_specifiers_no_type_opt','declaration_specifiers_no_type',2,'p_declaration_specifiers_no_type_2','c_parser.py',767),
  ('declaration_specifiers_no_type -> function_specifier declaration_specifiers_no_type_opt','declaration_specifiers_no_type',2,'p_declaration_specifiers_no_type_3','c_parser.py',772),
  ('declaration_specifiers -> declaration_specifiers type_qualifier','declaration_specifiers',2,'p_declaration_specifiers_1','c_parser.py',778),
  ('declaration_specifiers -> declaration_specifiers storage_class_specifier','declaration_specifiers',2,'p_declaration_specifiers_2','c_parser.py',783),
  ('declaration_specifiers -> declaration_specifiers function_specifier','declaration_specifiers',2,'p_declaration_specifiers_3','c_parser.py',788),
  ('declaration_specifiers -> declaration_specifiers type_specifier_no_typeid','declaration_specifiers',2,'p_declaration_specifiers_4','c_parser.py',793),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers_5','c_parser.py',798),
  ('declaration_specifiers -> declaration_specifiers_no_type type_specifier','declaration_specifiers',2,'p_declaration_specifiers_6','c_parser.py',803),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',809),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',810),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',811),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',812),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','c_parser.py',813),
  ('function_specifier -> INLINE','function_specifier',1,'p_function_specifier','c_parser.py',818),
  ('type_specifier_no_typeid -> VOID','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',823),
  ('type_specifier_no_typeid -> _BOOL','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',824),
  ('type_specifier_no_typeid -> CHAR','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',825),
  ('type_specifier_no_typeid -> SHORT','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',826),
  ('type_specifier_no_typeid -> INT','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',827),
  ('type_specifier_no_typeid -> LONG','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',828),
  ('type_specifier_no_typeid -> FLOAT','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',829),
  ('type_specifier_no_typeid -> DOUBLE','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',830),
  ('type_specifier_no_typeid -> _COMPLEX','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',831),
  ('type_specifier_no_typeid -> SIGNED','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',832),
  ('type_specifier_no_typeid -> UNSIGNED','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',833),
  ('type_specifier_no_typeid -> __INT128','type_specifier_no_typeid',1,'p_type_specifier_no_typeid','c_parser.py',834),
  ('type_specifier -> typedef_name','type_specifier',1,'p_type_specifier','c_parser.py',839),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','c_parser.py',840),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','c_parser.py',841),
  ('type_specifier -> type_specifier_no_typeid','type_specifier',1,'p_type_specifier','c_parser.py',842),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','c_parser.py',847),
  ('type_qualifier -> RESTRICT','type_qualifier',1,'p_type_qualifier','c_parser.py',848),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','c_parser.py',849),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','c_parser.py',854),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','c_parser.py',855),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','c_parser.py',863),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','c_parser.py',864),
  ('id_init_declarator_list -> id_init_declarator','id_init_declarator_list',1,'p_id_init_declarator_list','c_parser.py',869),
  ('id_init_declarator_list -> id_init_declarator_list COMMA init_declarator','id_init_declarator_list',3,'p_id_init_declarator_list','c_parser.py',870),
  ('id_init_declarator -> id_declarator','id_init_declarator',1,'p_id_init_declarator','c_parser.py',875),
  ('id_init_declarator -> id_declarator EQUALS initializer','id_init_declarator',3,'p_id_init_declarator','c_parser.py',876),
  ('specifier_qualifier_list -> specifier_qualifier_list type_specifier_no_typeid','specifier_qualifier_list',2,'p_specifier_qualifier_list_1','c_parser.py',883),
  ('specifier_qualifier_list -> specifier_qualifier_list type_qualifier','specifier_qualifier_list',2,'p_specifier_qualifier_list_2','c_parser.py',888),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list_3','c_parser.py',893),
  ('specifier_qualifier_list -> type_qualifier_list type_specifier','specifier_qualifier_list',2,'p_specifier_qualifier_list_4','c_parser.py',898),
  ('struct_or_union_specifier -> struct_or_union ID','struct_or_union_specifier',2,'p_struct_or_union_specifier_1','c_parser.py',907),
  ('struct_or_union_specifier -> struct_or_union TYPEID','struct_or_union_specifier',2,'p_struct_or_union_specifier_1','c_parser.py',908),
  ('struct_or_union_specifier -> struct_or_union brace_open struct_declaration_list brace_close','struct_or_union_specifier',4,'p_struct_or_union_specifier_2','c_parser.py',918),
  ('struct_or_union_specifier -> struct_or_union brace_open brace_close','struct_or_union_specifier',3,'p_struct_or_union_specifier_2','c_parser.py',919),
  ('struct_or_union_specifier -> struct_or_union ID brace_open struct_declaration_list brace_close','struct_or_union_specifier',5,'p_struct_or_union_specifier_3','c_parser.py',936),
  ('struct_or_union_specifier -> struct_or_union ID brace_open brace_close','struct_or_union_specifier',4,'p_struct_or_union_specifier_3','c_parser.py',937),
  ('struct_or_union_specifier -> struct_or_union TYPEID brace_open struct_declaration_list brace_close','struct_or_union_specifier',5,'p_struct_or_union_specifier_3','c_parser.py',938),
  ('struct_or_union_specifier -> struct_or_union TYPEID brace_open brace_close','struct_or_union_specifier',4,'p_struct_or_union_specifier_3','c_parser.py',939),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','c_parser.py',955),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','c_parser.py',956),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','c_parser.py',963),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','c_parser.py',964),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list_opt SEMI','struct_declaration',3,'p_struct_declaration_1','c_parser.py',972),
  ('struct_declaration -> SEMI','struct_declaration',1,'p_struct_declaration_2','c_parser.py',1010),
  ('struct_declaration -> pppragma_directive','struct_declaration',1,'p_struct_declaration_3','c_parser.py',1015),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','c_parser.py',1020),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','c_parser.py',1021),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator_1','c_parser.py',1029),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator_2','c_parser.py',1034),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator_2','c_parser.py',1035),
  ('enum_specifier -> ENUM ID','enum_specifier',2,'p_enum_specifier_1','c_parser.py',1043),
  ('enum_specifier -> ENUM TYPEID','enum_specifier',2,'p_enum_specifier_1','c_parser.py',1044),
  ('enum_specifier -> ENUM brace_open enumerator_list brace_close','enum_specifier',4,'p_enum_specifier_2','c_parser.py',1049),
  ('enum_specifier -> ENUM ID brace_open enumerator_list brace_close','enum_specifier',5,'p_enum_specifier_3','c_parser.py',1054),
  ('enum_specifier -> ENUM TYPEID brace_open enumerator_list brace_close','enum_specifier',5,'p_enum_specifier_3','c_parser.py',1055),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','c_parser.py',1060),
  ('enumerator_list -> enumerator_list COMMA','enumerator_list',2,'p_enumerator_list','c_parser.py',1061),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','c_parser.py',1062),
  ('enumerator -> ID','enumerator',1,'p_enumerator','c_parser.py',1073),
  ('enumerator -> ID EQUALS constant_expression','enumerator',3,'p_enumerator','c_parser.py',1074),
  ('declarator -> id_declarator','declarator',1,'p_declarator','c_parser.py',1089),
  ('declarator -> typeid_declarator','declarator',1,'p_declarator','c_parser.py',1090),
  ('pointer -> TIMES type_qualifier_list_opt','pointer',2,'p_pointer','c_parser.py',1201),
  ('pointer -> TIMES type_qualifier_list_opt pointer','pointer',3,'p_pointer','c_parser.py',1202),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','c_parser.py',1231),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','c_parser.py',1232),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','c_parser.py',1237),
  ('parameter_type_list -> parameter_list COMMA ELLIPSIS','parameter_type_list',3,'p_parameter_type_list','c_parser.py',1238),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','c_parser.py',1246),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','c_parser.py',1247),
  ('parameter_declaration -> declaration_specifiers id_declarator','parameter_declaration',2,'p_parameter_declaration_1','c_parser.py',1266),
  ('parameter_declaration -> declaration_specifiers typeid_noparen_declarator','parameter_declaration',2,'p_parameter_declaration_1','c_parser.py',1267),
  ('parameter_declaration -> declaration_specifiers abstract_declarator_opt','parameter_declaration',2,'p_parameter_declaration_2','c_parser.py',1278),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','c_parser.py',1309),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','c_parser.py',1310),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','c_parser.py',1319),
  ('initializer -> brace_open initializer_list_opt brace_close','initializer',3,'p_initializer_2','c_parser.py',1324),
  ('initializer -> brace_open initializer_list COMMA brace_close','initializer',4,'p_initializer_2','c_parser.py',1325),
  ('initializer_list -> designation_opt initializer','initializer_list',2,'p_initializer_list','c_parser.py',1333),
  ('initializer_list -> initializer_list COMMA designation_opt initializer','initializer_list',4,'p_initializer_list','c_parser.py',1334),
  ('designation -> designator_list EQUALS','designation',2,'p_designation','c_parser.py',1345),
  ('designator_list -> designator','designator_list',1,'p_designator_list','c_parser.py',1353),
  ('designator_list -> designator_list designator','designator_list',2,'p_designator_list','c_parser.py',1354),
  ('designator -> LBRACKET constant_expression RBRACKET','designator',3,'p_designator','c_parser.py',1359),
  ('designator -> PERIOD identifier','designator',2,'p_designator','c_parser.py',1360),
  ('type_name -> specifier_qualifier_list abstract_declarator_opt','type_name',2,'p_type_name','c_parser.py',1365),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator_1','c_parser.py',1376),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator_2','c_parser.py',1384),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator_3','c_parser.py',1389),
  ('direct_abstract_declarator -> LPAREN abstract_declarator RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_1','c_parser.py',1399),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACKET assignment_expression_opt RBRACKET','direct_abstract_declarator',4,'p_direct_abstract_declarator_2','c_parser.py',1403),
  ('direct_abstract_declarator -> LBRACKET assignment_expression_opt RBRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator_3','c_parser.py',1414),
  ('direct_abstract_declarator -> direct_abstract_declarator LBRACKET TIMES RBRACKET','direct_abstract_declarator',4,'p_direct_abstract_declarator_4','c_parser.py',1423),
  ('direct_abstract_declarator -> LBRACKET TIMES RBRACKET','direct_abstract_declarator',3,'p_direct_abstract_declarator_5','c_parser.py',1434),
  ('direct_abstract_declarator -> direct_abstract_declarator LPAREN parameter_type_list_opt RPAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator_6','c_parser.py',1443),
  ('direct_abstract_declarator -> LPAREN parameter_type_list_opt RPAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator_7','c_parser.py',1453),
  ('block_item -> declaration','block_item',1,'p_block_item','c_parser.py',1464),
  ('block_item -> statement','block_item',1,'p_block_item','c_parser.py',1465),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','c_parser.py',1472),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','c_parser.py',1473),
  ('compound_statement -> brace_open block_item_list_opt brace_close','compound_statement',3,'p_compound_statement_1','c_parser.py',1479),
  ('labeled_statement -> ID COLON pragmacomp_or_statement','labeled_statement',3,'p_labeled_statement_1','c_parser.py',1485),
  ('labeled_statement -> CASE constant_expression COLON pragmacomp_or_statement','labeled_statement',4,'p_labeled_statement_2','c_parser.py',1489),
  ('labeled_statement -> DEFAULT COLON pragmacomp_or_statement','labeled_statement',3,'p_labeled_statement_3','c_parser.py',1493),
  ('selection_statement -> IF LPAREN expression RPAREN pragmacomp_or_statement','selection_statement',5,'p_selection_statement_1','c_parser.py',1497),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE pragmacomp_or_statement','selection_statement',7,'p_selection_statement_2','c_parser.py',1501),
  ('selection_statement -> SWITCH LPAREN expression RPAREN pragmacomp_or_statement','selection_statement',5,'p_selection_statement_3','c_parser.py',1505),
  ('iteration_statement -> WHILE LPAREN expression RPAREN pragmacomp_or_statement','iteration_statement',5,'p_iteration_statement_1','c_parser.py',1510),
  ('iteration_statement -> DO pragmacomp_or_statement WHILE LPAREN expression RPAREN SEMI','iteration_statement',7,'p_iteration_statement_2','c_parser.py',1514),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement','iteration_statement',9,'p_iteration_statement_3','c_parser.py',1518),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN pragmacomp_or_statement','iteration_statement',8,'p_iteration_statement_4','c_parser.py',1522),
  ('jump_statement -> GOTO ID SEMI','jump_statement',3,'p_jump_statement_1','c_parser.py',1527),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_2','c_parser.py',1531),
  ('jump_statement -> CONTINUE SEMI','jump_statement',2,'p_jump_statement_3','c_parser.py',1535),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement_4','c_parser.py',1539),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement_4','c_parser.py',1540),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','c_parser.py',1545),
  ('expression -> assignment_expression','expression',1,'p_expression','c_parser.py',1552),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','c_parser.py',1553),
  ('typedef_name -> TYPEID','typedef_name',1,'p_typedef_name','c_parser.py',1565),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','c_parser.py',1569),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','c_parser.py',1570),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','c_parser.py',1583),
  ('assignment_operator -> XOREQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1584),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1585),
  ('assignment_operator -> DIVEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1586),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1587),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1588),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1589),
  ('assignment_operator -> LSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1590),
  ('assignment_operator -> RSHIFTEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1591),
  ('assignment_operator -> ANDEQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1592),
  ('assignment_operator -> OREQUAL','assignment_operator',1,'p_assignment_operator','c_parser.py',1593),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','c_parser.py',1598),
  ('conditional_expression -> binary_expression','conditional_expression',1,'p_conditional_expression','c_parser.py',1602),
  ('conditional_expression -> binary_expression CONDOP expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','c_parser.py',1603),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','c_parser.py',1611),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1612),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1613),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1614),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1615),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1616),
  ('binary_expression -> binary_expression RSHIFT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1617),
  ('binary_expression -> binary_expression LSHIFT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1618),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1619),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1620),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1621),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1622),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1623),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1624),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1625),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1626),
  ('binary_expression -> binary_expression XOR binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1627),
  ('binary_expression -> binary_expression LAND binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1628),
  ('binary_expression -> binary_expression LOR binary_expression','binary_expression',3,'p_binary_expression','c_parser.py',1629),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','c_parser.py',1637),
  ('cast_expression -> LPAREN type_name RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','c_parser.py',1641),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','c_parser.py',1645),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','c_parser.py',1649),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','c_parser.py',1650),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','c_parser.py',1651),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','c_parser.py',1656),
  ('unary_expression -> SIZEOF LPAREN type_name RPAREN','unary_expression',4,'p_unary_expression_3','c_parser.py',1657),
  ('unary_operator -> AND','unary_operator',1,'p_unary_operator','c_parser.py',1665),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','c_parser.py',1666),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','c_parser.py',1667),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','c_parser.py',1668),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','c_parser.py',1669),
  ('unary_operator -> LNOT','unary_operator',1,'p_unary_operator','c_parser.py',1670),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','c_parser.py',1675),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','c_parser.py',1679),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_list RPAREN','postfix_expression',4,'p_postfix_expression_3','c_parser.py',1683),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','c_parser.py',1684),
  ('postfix_expression -> postfix_expression PERIOD ID','postfix_expression',3,'p_postfix_expression_4','c_parser.py',1689),
  ('postfix_expression -> postfix_expression PERIOD TYPEID','postfix_expression',3,'p_postfix_expression_4','c_parser.py',1690),
  ('postfix_expression -> postfix_expression ARROW ID','postfix_expression',3,'p_postfix_expression_4','c_parser.py',1691),
  ('postfix_expression -> postfix_expression ARROW TYPEID','postfix_expression',3,'p_postfix_expression_4','c_parser.py',1692),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_5','c_parser.py',1698),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_5','c_parser.py',1699),
  ('postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list brace_close','postfix_expression',6,'p_postfix_expression_6','c_parser.py',1704),
  ('postfix_expression -> LPAREN type_name RPAREN brace_open initializer_list COMMA brace_close','postfix_expression',7,'p_postfix_expression_6','c_parser.py',1705),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','c_parser.py',1710),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_2','c_parser.py',1714),
  ('primary_expression -> unified_string_literal','primary_expression',1,'p_primary_expression_3','c_parser.py',1718),
  ('primary_expression -> unified_wstring_literal','primary_expression',1,'p_primary_expression_3','c_parser.py',1719),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_4','c_parser.py',1724),
  ('primary_expression -> OFFSETOF LPAREN type_name COMMA offsetof_member_designator RPAREN','primary_expression',6,'p_primary_expression_5','c_parser.py',1728),
  ('offsetof_member_designator -> identifier','offsetof_member_designator',1,'p_offsetof_member_designator','c_parser.py',1736),
  ('offsetof_member_designator -> offsetof_member_designator PERIOD identifier','offsetof_member_designator',3,'p_offsetof_member_designator','c_parser.py',1737),
  ('offsetof_member_designator -> offsetof_member_designator LBRACKET expression RBRACKET','offsetof_member_designator',4,'p_offsetof_member_designator','c_parser.py',1738),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','c_parser.py',1751),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','c_parser.py',1752),
  ('identifier -> ID','identifier',1,'p_identifier','c_parser.py',1761),
  ('constant -> INT_CONST_DEC','constant',1,'p_constant_1','c_parser.py',1765),
  ('constant -> INT_CONST_OCT','constant',1,'p_constant_1','c_parser.py',1766),
  ('constant -> INT_CONST_HEX','constant',1,'p_constant_1','c_parser.py',1767),
  ('constant -> INT_CONST_BIN','constant',1,'p_constant_1','c_parser.py',1768),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_2','c_parser.py',1774),
  ('constant -> HEX_FLOAT_CONST','constant',1,'p_constant_2','c_parser.py',1775),
  ('constant -> CHAR_CONST','constant',1,'p_constant_3','c_parser.py',1791),
  ('constant -> WCHAR_CONST','constant',1,'p_constant_3','c_parser.py',1792),
  ('unified_string_literal -> STRING_LITERAL','unified_string_literal',1,'p_unified_string_literal','c_parser.py',1803),
  ('unified_string_literal -> unified_string_literal STRING_LITERAL','unified_string_literal',2,'p_unified_string_literal','c_parser.py',1804),
  ('unified_wstring_literal -> WSTRING_LITERAL','unified_wstring_literal',1,'p_unified_wstring_literal','c_parser.py',1814),
  ('unified_wstring_literal -> unified_wstring_literal WSTRING_LITERAL','unified_wstring_literal',2,'p_unified_wstring_literal','c_parser.py',1815),
  ('brace_open -> LBRACE','brace_open',1,'p_brace_open','c_parser.py',1825),
  ('brace_close -> RBRACE','brace_close',1,'p_brace_close','c_parser.py',1831),
  ('empty -> <empty>','empty',0,'p_empty','c_parser.py',1837),
]
